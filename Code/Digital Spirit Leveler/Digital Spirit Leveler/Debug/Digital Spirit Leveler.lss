
AVRASM ver. 2.2.8  E:\OneDrive - University of Peradeniya\Project\Digital Spirit Leveler\Digital-Spirit-Leveler\Code\Digital Spirit Leveler\Digital Spirit Leveler\main.asm Tue Jan 02 19:54:32 2024

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
E:\OneDrive - University of Peradeniya\Project\Digital Spirit Leveler\Digital-Spirit-Leveler\Code\Digital Spirit Leveler\Digital Spirit Leveler\main.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\M328PDEF.INC'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
E:\OneDrive - University of Peradeniya\Project\Digital Spirit Leveler\Digital-Spirit-Leveler\Code\Digital Spirit Leveler\Digital Spirit Leveler\main.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\M328PDEF.INC'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; DIGITAL_LEVEL_LCD.asm
                                 ;
                                 ; Created: 12/28/2023 1:43:29 PM
                                 ; Author : SAHAN SIRIWARDENA
                                 ;
                                 
                                 
                                 .INCLUDE "M328PDEF.INC"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .CSEG
                                 .ORG 0X00
                                 .def RES1 = R2
                                 .def RES2 = R3
                                 .def RES3 = R4
                                 .def RES4 = R5
                                 .EQU A0_LOW = 0X0145
                                 .EQU A0_HIGH = 0X0146
                                 .EQU C0_LOW = 0X0147
                                 .EQU C0_HIGH = 0X0148
                                 .EQU A0_SQURE_LOW=0X0149
                                 .EQU A0_SQURE_MID=0X014A
                                 .EQU A0_SQURE_HIGH=0X014B
                                 .EQU C0_SQURE_LOW=0X014C
                                 .EQU C0_SQURE_MID=0X014D
                                 .EQU C0_SQURE_HIGH=0X014E
                                 .EQU SQURE_LOW=0X014F
                                 .EQU SQURE_MID=0X0150
                                 .EQU SQURE_HIGH=0X0151
                                 
                                 
                                 .EQU A0_SIGN=0X0152
                                 .EQU C0_SIGN=0X0153
                                 .EQU FINAL=0X0154
                                 
                                 .EQU NUM1=0X64  ;100
                                 .EQU SUB_NUM=0X1ED;493
                                 .EQU PI=0X13A
                                 .EQU UPPER_MULTI=0X3840
                                 
                                 .EQU NINTY = 0B01011010
                                 .EQU SEVENTY = 0B01000110
                                 .EQU SIXTYNINE = 0B01000101
                                 .EQU FOURTY = 0B00101000
                                 .EQU THIRTYNINE = 0B00100111
                                 .EQU FIVE = 0B00000101
                                 
                                 ;-------------------------------!!!!!TESTING PURPOSE ONLY!!!!!-----------------------------------
                                 ;.EQU CHECK1 =0X32 ;50
                                 ;.EQU CHECK2 =0X14 ;20
                                 ;------------------------------------------------------------------------------------------------
                                 
                                 ;------------------------------------------------------------------------------------------------
                                 ;DEFINE THE I/O PINS
                                 START:
000000 e400                      	LDI R16,0X40
000001 9300 007c                 	STS ADMUX,R16 ;SET VCC AS REFERENCE,RIGHT-JUSTIFIED DATA,ADC0
000003 e807                      	LDI R16,0B10000111
000004 9300 007a                 	STS ADCSRA,R16 ;ENABLE ADC,ADC PRESCALER CLK/128
                                 	
000006 ef0f                      	LDI R16,0XFF
000007 b90a                      	OUT DDRD,R16 ;SET PORT D O/P DATA
000008 ef0f                      	LDI R16,0XFF 
000009 b904                      	OUT DDRB,R16 ;SET PORT B O/P COMMOND
00000a 9828                      	CBI PORTB,0  ;EN=0
00000b d247                      	RCALL DELAY_MS ;WAIT FOR LCD POWER ON
00000c d13d                      	RCALL LCD_INIT ;INTIALIZING THE LCD
                                 
                                 ;--------------------------------------------------------------------------------------------------
                                 ;MAIN FUNCTION
                                 MAIN:
00000d e400                      	LDI R16,0X40
00000e 9300 007c                 	STS ADMUX,R16 ;SET VCC AS REFERENCE,RIGHT-JUSTIFIED DATA,ADC0
                                 READ_ADC_01:	
000010 ec17                      	LDI R17,0XC7
000011 9310 007a                 	STS ADCSRA,R17 ;SET ADSC IN ADCSRA TO START CONVERSION
                                 LOOP_ADC1:		
000013 9100 007a                 	LDS R16,ADCSRA
000015 ff04                      	SBRS R16,4 ;SKIP JUMP WHEN CONVERTION IS DONE (FLAG SET)
000016 cffc                      	RJMP LOOP_ADC1
000017 ed17                      	LDI R17,0XD7
000018 9310 007a                 	STS ADCSRA,R17 ;TO SIGNAL 'READY-TO-BE-CLEARED' BY H/W
00001a 91e0 0078                 	LDS R30,ADCL ;GET THE LOW-BYTE RESULT FROM ADCL
00001c 91f0 0079                 	LDS R31,ADCH ;GET THE HIGH-BYTE RESULT FROM ADCH
00001e 93e0 0145                 	STS A0_LOW,R30
000020 93f0 0146                 	STS A0_HIGH,R31
000022 e010                      	LDI R17,0X00
000023 9310 007a                 	STS ADCSRA,R17 ;TO SIGNAL 'READY-TO-BE-CLEARED' BY H/W
                                 
000025 e401                      	LDI R16,0X41
000026 9300 007c                 	STS ADMUX,R16 ;SET VCC AS REFERENCE,RIGHT-JUSTIFIED DATA,ADC0
                                 READ_ADC_02:	
000028 ec17                      	LDI R17,0XC7
000029 9310 007a                 	STS ADCSRA,R17 ;SET ADSC IN ADCSRA TO START CONVERSION
                                 LOOP_ADC2:		
00002b 9100 007a                 	LDS R16,ADCSRA
00002d ff04                      	SBRS R16,4 ;SKIP JUMP WHEN CONVERTION IS DONE (FLAG SET)
00002e cffc                      	RJMP LOOP_ADC2
00002f ed17                      	LDI R17,0XD7
000030 9310 007a                 	STS ADCSRA,R17 ;TO SIGNAL 'READY-TO-BE-CLEARED' BY H/W
000032 91e0 0078                 	LDS R30,ADCL ;GET THE LOW-BYTE RESULT FROM ADCL
000034 91f0 0079                 	LDS R31,ADCH ;GET THE HIGH-BYTE RESULT FROM ADCH
000036 93e0 0147                 	STS C0_LOW,R30
000038 93f0 0148                 	STS C0_HIGH,R31
00003a e010                      	LDI R17,0X00
00003b 9310 007a                 	STS ADCSRA,R17 ;TO SIGNAL 'READY-TO-BE-CLEARED' BY H/W
                                 
00003d 91e0 0145                 	LDS R30,A0_LOW
00003f 91f0 0146                 	LDS R31,A0_HIGH
000041 d176                      	RCALL MAP
                                 
                                 
                                 
                                 
                                 	;----------------------------------------------------------------------------------------------
                                 
000042 9360 0152                 	STS A0_SIGN,R22
000044 9300 0145                 	STS A0_LOW,R16
000046 9310 0146                 	STS A0_HIGH,R17
                                 
                                 	;-----------------------------------------------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
000048 91e0 0147                 	LDS R30,C0_LOW
00004a 91f0 0148                 	LDS R31,C0_HIGH
00004c d16b                      	RCALL MAP
00004d 9360 0153                 	STS C0_SIGN,R22
00004f 9300 0147                 	STS C0_LOW,R16
000051 9310 0148                 	STS C0_HIGH,R17
                                 
                                 ;-------------------------------!!!!!TESTING PURPOSE ONLY!!!!!-------------------------------------
                                 	;LDI R18,LOW(CHECK1)
                                 	;STS A0_LOW,R18
                                 	;LDI R18,HIGH(CHECK1)
                                 	;STS A0_HIGH,R18
                                 ;--------------------------------------------------------------------------------------------------
                                 
000053 9120 0145                 	LDS R18,A0_LOW
000055 91b0 0146                 	LDS R27,A0_HIGH
000057 d1ab                      	RCALL POWER
000058 9220 0149                 	STS A0_SQURE_LOW,RES1;LOW BYTE
00005a 9230 014a                 	STS A0_SQURE_MID,RES2;MID BYTE
00005c 9240 014b                 	STS A0_SQURE_HIGH,RES3;HIGH BYTE
00005e d203                      	RCALL CLEAR
00005f 2422                      	CLR RES1
000060 2433                      	CLR RES2
000061 2444                      	CLR RES3
000062 2455                      	CLR RES4
                                 
                                 ;-------------------------------!!!!!TESTING PURPOSE ONLY!!!!!-------------------------------------
                                 
                                 	;LDI R16,LOW(CHECK2)
                                 	;STS C0_LOW,R16
                                 	;LDI R16,HIGH(CHECK2)
                                 	;STS C0_HIGH,R16
                                 
                                 ;--------------------------------------------------------------------------------------------------
                                 
000063 9120 0147                 	LDS R18,C0_LOW
000065 91b0 0148                 	LDS R27,C0_HIGH
000067 d19b                      	RCALL POWER
000068 9220 014c                 	STS C0_SQURE_LOW,RES1;LOW BYTE
00006a 9230 014d                 	STS C0_SQURE_MID,RES2;MID BYTE
00006c 9240 014e                 	STS C0_SQURE_HIGH,RES3;HIGH BYTE
00006e d1f3                      	RCALL CLEAR
00006f 2422                      	CLR RES1
000070 2433                      	CLR RES2
000071 2444                      	CLR RES3
000072 2455                      	CLR RES4
                                 	;-----25XC0^2------
000073 e109                      	LDI R16,0X19;
000074 e010                      	LDI R17,0X00
000075 91e0 014c                 	LDS R30,C0_SQURE_LOW
000077 91f0 014d                 	LDS R31,C0_SQURE_MID
000079 d152                      	RCALL MULTI
00007a 9220 014c                 	STS C0_SQURE_LOW,RES1;LOW BYTE
00007c 9230 014d                 	STS C0_SQURE_MID,RES2;MID BYTE
00007e 9240 014e                 	STS C0_SQURE_HIGH,RES3;HIGH BYTE
000080 d1e1                      	RCALL CLEAR
000081 2422                      	CLR RES1
000082 2433                      	CLR RES2
000083 2444                      	CLR RES3
000084 2455                      	CLR RES4
                                 	;------------------
                                 	;-----80XA0^2------
000085 e500                      	LDI R16,0X50;
000086 e010                      	LDI R17,0X00
000087 91e0 0149                 	LDS R30,A0_SQURE_LOW
000089 91f0 014a                 	LDS R31,A0_SQURE_MID
00008b d140                      	RCALL MULTI
00008c 2d12                      	MOV R17,RES1  ;R2 ;LOW BYTE
00008d 2d23                      	MOV R18,RES2  ;R3 ;MID BYTE
00008e 2d44                      	MOV R20,RES3  ;R4 ;HIGH BYTE
00008f 9220 0149                 	STS A0_SQURE_LOW,RES1;LOW BYTE
000091 9230 014a                 	STS A0_SQURE_MID,RES2;MID BYTE
000093 9240 014b                 	STS A0_SQURE_HIGH,RES3;HIGH BYTE
000095 2422                      	CLR RES1
000096 2433                      	CLR RES2
000097 2444                      	CLR RES3
000098 2455                      	CLR RES4
000099 d1c8                      	RCALL CLEAR
                                 	;-----(80XA0^2)/3------
00009a 9110 0149                 	LDS R17,A0_SQURE_LOW
00009c 9120 014a                 	LDS R18,A0_SQURE_MID
00009e 9140 014b                 	LDS R20,A0_SQURE_HIGH
0000a0 e0a3                      	LDI R26,0X03
0000a1 e0b0                      	LDI R27,0X00
0000a2 e0c0                      	LDI R28,0X00
0000a3 d140                      	RCALL DIV
0000a4 9300 0149                 	STS A0_SQURE_LOW,R16;LOW BYTE
0000a6 9370 014a                 	STS A0_SQURE_MID,R23;MID BYTE
0000a8 93d0 014b                 	STS A0_SQURE_HIGH,R29;HIGH BYTE
                                 	;-----ADD----------------
0000aa 2f10                      	MOV R17,R16
0000ab 2f27                      	MOV R18,R23
0000ac 2f4d                      	MOV R20,R29
0000ad 9150 014c                 	LDS R21,C0_SQURE_LOW
0000af 9160 014d                 	LDS R22,C0_SQURE_MID
0000b1 9170 014e                 	LDS R23,C0_SQURE_HIGH
0000b3 e080                      	LDI R24,0X00
0000b4 0f15                      	ADD R17,R21
0000b5 1f26                      	ADC R18,R22
0000b6 1f47                      	ADC R20,R23
0000b7 9310 014f                 	STS SQURE_LOW,R17;LOW BYTE
0000b9 9320 0150                 	STS SQURE_MID,R18;MID BYTE
0000bb 9340 0151                 	STS SQURE_HIGH,R20;HIGH BYTE
0000bd 9180 014f                 	LDS R24,SQURE_LOW
0000bf 9190 0150                 	LDS R25,SQURE_MID
0000c1 91a0 0151                 	LDS R26,SQURE_HIGH
0000c3 d145                      	RCALL SQURE_ROOT
                                 ROOT1:
0000c4 9340 014f                 	STS SQURE_LOW,R20
0000c6 9350 0150                 	STS SQURE_MID,R21
0000c8 d199                      	RCALL CLEAR
0000c9 2422                      	CLR RES1
0000ca 2433                      	CLR RES2
0000cb 2444                      	CLR RES3
0000cc 2455                      	CLR RES4
                                 	;----------3C------------------------
0000cd e003                      	LDI R16,0X03;
0000ce e010                      	LDI R17,0X00
0000cf 91e0 0147                 	LDS R30,C0_LOW
0000d1 91f0 0148                 	LDS R31,C0_HIGH
0000d3 d0f8                      	RCALL MULTI
0000d4 2d12                      	MOV R17,RES1  ;R2 ;LOW BYTE
0000d5 2d23                      	MOV R18,RES2  ;R3 ;MID BYTE
0000d6 2d44                      	MOV R20,RES3  ;R4 ;HIGH BYTE
                                 	;--------------3C+/-X-----------------------
0000d7 9100 0153                 	LDS R16,C0_SIGN
0000d9 ff00                      	SBRS R16,0
0000da c00a                      	RJMP BRANCH_01
0000db 9100 014f                 	LDS R16,SQURE_LOW
0000dd 9130 0150                 	LDS R19,SQURE_MID
0000df e050                      	LDI R21,0X00
0000e0 1b01                      	SUB R16,R17
0000e1 0b32                      	SBC R19,R18
0000e2 0b54                      	SBC R21,R20
0000e3 940c 00e6                 	JMP ROOT2
                                 BRANCH_01:	
0000e5 d152                      	RCALL ADD_VALUE
                                 ROOT2:
                                 	;-------(3C+X)*PI---------------------------
0000e6 2f13                      	MOV R17,R19
0000e7 e3ea                      	LDI R30,LOW(PI)
0000e8 e0f1                      	LDI R31,HIGH(PI)
0000e9 d0e2                      	RCALL MULTI
0000ea 9220 014f                 	STS SQURE_LOW,R2;LOW BYTE
0000ec 9230 0150                 	STS SQURE_MID,R3;MID BYTE
0000ee 9240 0151                 	STS SQURE_HIGH,R4;HIGH BYTE
                                 	;-------8*18000*A0---------------------------
0000f0 9100 0145                 	LDS R16,A0_LOW
0000f2 9110 0146                 	LDS R17,A0_HIGH
0000f4 e0ea                      	LDI R30,0X0A
0000f5 e0f0                      	LDI R31,0X00
0000f6 d0d5                      	RCALL MULTI
0000f7 2d02                      	MOV R16,RES1
0000f8 2d13                      	MOV R17,RES2
0000f9 e4e0                      	LDI R30,LOW(UPPER_MULTI)
0000fa e3f8                      	LDI R31,HIGH(UPPER_MULTI)
0000fb d0d0                      	RCALL MULTI
                                 ;-------FINAL--------------------------
0000fc 2d12                      	MOV R17,RES1
0000fd 2d23                      	MOV R18,RES2
0000fe 2d44                      	MOV R20,RES3
0000ff 91a0 014f                 	LDS R26,SQURE_LOW
000101 91b0 0150                 	LDS R27,SQURE_MID
000103 91c0 0151                 	LDS R28,SQURE_HIGH
000105 d0de                      	RCALL DIV
                                 ;-------------------------FINAL VALUE IS SAVE IN THE RELAVANT MEMORY ADDRESS--------------------
000106 9300 0154                 	STS FINAL,R16
                                 
                                 
                                 ;-----------------------------------------------------------------------------------------------
000108 2fe0                      	MOV R30,R16
000109 e330                      	LDI  R19,48
00010a d08a                      	RCALL ASCII
00010b d147                      	RCALL DELAY_MS
00010c d155                      	RCALL CLEAR
                                 ;-----------------------------------------------------------------------------------------------
                                 
                                 ;IF YOU WANT TO THE GET THE FINAL VALUE AND THE SIGN OF THE FINAL VALUE YOU CAN USE "FINAL" MEMORY ADDRESS TO ACCESS THE FINAL VALUE AND THE SIGN CAN BE GET BY ACCESS "A0_SIGN"
                                 ;MEMORY ADDRESS IN THE SIGN MEMORY "1" REPRESENT NEGATIVE AS WELL AS "0" REPRESENT THE POSITIVE 
                                 
                                 	
                                 	
                                 	;REMOVE PREVIOUS BULB VALUES
00010d 9858                      	CBI PORTD, 0
00010e 9859                      	CBI PORTD, 1
00010f 985a                      	CBI PORTD, 2
000110 985b                      	CBI PORTD, 3
                                 
000111 982a                      	CBI PORTB, 2
000112 982b                      	CBI PORTB, 3
000113 982c                      	CBI PORTB, 4
000114 982d                      	CBI PORTB, 5
                                 
000115 9140 0154                 	LDS R20, FINAL
000117 9150 0152                 	LDS R21, A0_SIGN
000119 e021                      	LDI R18, 0B00000001
                                 	
                                 	
00011a e015                      	LDI R17, FIVE
00011b 1741                      	CP R20, R17	
00011c f420                      	BRSH SIGNCHECK
                                 	;LDI R16, 0B00000100
00011d 9a2a                      	SBI PORTB, 2
                                 	;LDI R17, 0B00000001
00011e 9a58                      	SBI PORTD, 0
                                 	;OUT PORTD, R17
                                 	;OUT PORTB, R16
00011f d142                      	RCALL CLEAR
000120 ceec                      	RJMP MAIN
                                 
                                 SIGNCHECK:
000121 2352                      	AND R21, R18
000122 1725                      	CP R18, R21
000123 f009                      	BREQ MINUSSIGNAL
000124 f491                      	BRNE PLUSSIGNAL
                                 
                                 MINUSSIGNAL:
000125 e218                      	LDI R17, FOURTY
000126 1741                      	CP  R20, R17
000127 f418                      	BRSH MINUSSEVENTY
                                 	;LDI R16, 0B00000100
                                 	;OUT PORTB, R16
000128 9a2a                      	SBI PORTB, 2
000129 d138                      	RCALL CLEAR
00012a cee2                      	RJMP MAIN
                                 
                                 	MINUSSEVENTY:
00012b e416                      		LDI R17, SEVENTY
00012c 1741                      		CP R20, R17
00012d f420                      		BRSH MINUSNINTY
                                 		;LDI R16, 0B00001100
                                 		;OUT PORTB, R16
00012e 9a2a                      		SBI PORTB, 2
00012f 9a2b                      		SBI PORTB, 3
000130 d131                      		RCALL CLEAR
000131 cedb                      		RJMP MAIN
                                 
                                 		MINUSNINTY:
                                 			;LDI R16, 0B00011100
                                 			;OUT PORTB, R16
000132 9a2a                      			SBI PORTB, 2
000133 9a2b                      			SBI PORTB, 3
000134 9a2c                      			SBI PORTB, 4
000135 d12c                      			RCALL CLEAR
000136 ced6                      			RJMP MAIN
                                 
                                 PLUSSIGNAL:
000137 e218                      	LDI R17, FOURTY
000138 1741                      	CP  R20, R17
000139 f418                      	BRSH PLUSSEVENTY
                                 	;LDI R17, 0B00000001
                                 	;OUT PORTD, R17
00013a 9a58                      	SBI PORTD, 0
00013b d126                      	RCALL CLEAR
00013c ced0                      	RJMP MAIN
                                 
                                 	PLUSSEVENTY:
00013d e416                      		LDI R17, SEVENTY
00013e 1741                      		CP R20, R17
00013f f420                      		BRSH PLUSNINTY
                                 		;LDI R17, 0B00000011
                                 		;OUT PORTD, R17
000140 9a58                      		SBI PORTD, 0
000141 9a59                      		SBI PORTD, 1
000142 d11f                      		RCALL CLEAR
000143 cec9                      		RJMP MAIN
                                 
                                 		PLUSNINTY:
                                 			;LDI R17, 0B00000111
                                 			;OUT PORTD, R17
000144 9a58                      			SBI PORTD, 0
000145 9a59                      			SBI PORTD, 1
000146 9a5a                      			SBI PORTD, 2
000147 d11a                      			RCALL CLEAR
000148 cec4                      			RJMP MAIN
                                 
                                 
                                 ;-----------------------------------------------------------------------------------------------
000149 cec3                      	RJMP MAIN
                                 	
                                 ;-----------------------------------------------------------------------------------------------
                                 ;LCD INITIALIZING
                                 LCD_INIT:
00014a e323                      	LDI R18,0X33
00014b d015                      	RCALL COMMAND_WRITE ;INITIALIZING THE LCD FOR 4-BIT DATA 
00014c d106                      	RCALL DELAY_MS
00014d e322                      	LDI R18,0X32
00014e d012                      	RCALL COMMAND_WRITE ;INITIALIZING THE LCD FOR 4-BIT DATA
00014f d103                      	RCALL DELAY_MS
000150 e228                      	LDI R18,0X28
000151 d00f                      	RCALL COMMAND_WRITE ;LCD 2 LINES,5X7 MATRIX
000152 d100                      	RCALL DELAY_MS
000153 e02c                      	LDI R18,0X0C
000154 d00c                      	RCALL COMMAND_WRITE ;DISPLAY ON,CURSOR OFF
000155 e021                      	LDI R18,0X01
000156 d00a                      	RCALL COMMAND_WRITE ;CLEAR LCD
000157 d0fb                      	RCALL DELAY_MS
000158 e026                      	LDI R18,0X06
000159 d007                      	RCALL COMMAND_WRITE ;SHIFT CURSOR RIGHT
00015a d0f8                      	RCALL DELAY_MS
00015b d028                      	RCALL WORD
00015c d0f6                      	RCALL DELAY_MS
00015d ec20                      	LDI R18 ,0XC0
00015e d002                      	RCALL COMMAND_WRITE
00015f d0f3                      	RCALL DELAY_MS
000160 9508                      	RET
                                 ;-------------------------------------------------------------------------------------------------
                                 ;COMMAND WRITE
                                 COMMAND_WRITE:
000161 2fb2                      	MOV R27,R18
000162 7fb0                      	ANDI R27,0XF0 ;MASK LOW NIBBLE & KEEP HIGH NIBBLE
000163 b9bb                      	OUT PORTD,R27 ;O/P COMMAND HIGH NOBBLE TO PORT D
000164 9829                      	CBI PORTB,1   ;RS=0 FOR COMMAND
000165 9a28                      	SBI PORTB,0   ;EN=1
000166 940e 024b                 	CALL DELAY_SHORT
000168 9828                      	CBI PORTB,0   ;SEND A IMPLUSE TO THE EN PIN
000169 d0e4                      	RCALL DELAY_US ;DELAY IN MICRO SECOND
                                 
00016a 2fb2                      	MOV R27,R18
00016b 95b2                      	SWAP R27
00016c 7fb0                      	ANDI R27,0XF0
00016d b9bb                      	OUT PORTD,R27
00016e 9a28                      	SBI PORTB,0
00016f d0db                      	RCALL DELAY_SHORT
000170 9828                      	CBI PORTB,0 ;SEND A IMPLUSE TO THE EN PIN
000171 d0dc                      	RCALL DELAY_US
000172 9508                      	RET
                                 ;-------------------------------------------------------------------------------------------------
                                 ;DATA WRITE FUNCTION
                                 DATA_WRITE:
000173 2fb2                      	MOV R27,R18
000174 7fb0                      	ANDI R27,0XF0
000175 b9bb                      	OUT PORTD,R27
000176 9a29                      	SBI PORTB,1
000177 9a28                      	SBI PORTB,0
000178 d0d2                      	RCALL DELAY_SHORT
000179 9828                      	CBI PORTB,0
00017a d0d0                      	RCALL DELAY_SHORT
                                 	
00017b 2fb2                      	MOV R27,R18
00017c 95b2                      	SWAP R27
00017d 7fb0                      	ANDI R27,0XF0
00017e b9bb                      	OUT PORTD,R27
00017f 9a28                      	SBI PORTB,0
000180 d0ca                      	RCALL DELAY_SHORT
000181 9828                      	CBI PORTB,0 
000182 d0cb                      	RCALL DELAY_US
000183 9508                      	RET
                                 ;-------------------------------------------------------------------------------------------------------
                                 ;PRINT THE ANGLE WORD IN THE LCD
                                 WORD:
000184 e421                      	LDI R18,'A'
000185 dfed                      	RCALL DATA_WRITE
000186 e42e                      	LDI R18,'N'
000187 dfeb                      	RCALL DATA_WRITE
000188 e427                      	LDI R18,'G'
000189 dfe9                      	RCALL DATA_WRITE
00018a e42c                      	LDI R18,'L'
00018b dfe7                      	RCALL DATA_WRITE
00018c e425                      	LDI R18,'E'
00018d dfe5                      	RCALL DATA_WRITE
00018e e220                      	LDI R18,' '
00018f dfe3                      	RCALL DATA_WRITE
000190 e32a                      	LDI R18,':'
000191 dfe1                      	RCALL DATA_WRITE
000192 e220                      	LDI R18,' '
000193 dfdf                      	RCALL DATA_WRITE
000194 9508                      	RET
                                 ;-----------------------------------------------------------------------------------------------------
                                 ASCII:
000195 2788                      	CLR R24 ;SET THE COUNTER2 INTIAL VALUE O
000196 2799                      	CLR R25 ;SET THE COUNTER3 INTIAL VALUE O
                                 	;CLEAR THE LCD 2ND LINE
000197 e220                      	LDI R18,' '
000198 dfda                      	RCALL DATA_WRITE
000199 e220                      	LDI R18,' '
00019a dfd8                      	RCALL DATA_WRITE
00019b e220                      	LDI R18,' '
00019c dfd6                      	RCALL DATA_WRITE
00019d ec20                      	LDI R18,0XC0
00019e dfc2                      	RCALL COMMAND_WRITE
                                 LOOP9:
00019f 2fbe                      	MOV R27,R30
0001a0 36e4                      	CPI R30,100
                                 RUN1:
0001a1 f01a                      	BRMI LOOP10 ;JUMP WHEN R30<100
                                 RUN2:
0001a2 9583                      	INC R24
0001a3 56e4                      	SUBI R30,100 ;R16=R16-100
0001a4 cffa                      	RJMP LOOP9
                                 
                                 LOOP10:
0001a5 30ea                      	CPI R30,10 ;COMPARE R30 WITH 10
0001a6 f01a                      	BRMI DSP
0001a7 9593                      	INC R25
0001a8 50ea                      	SUBI R30,10
0001a9 cffb                      	RJMP LOOP10
                                 
                                 DSP:
0001aa e330                      	LDI  R19,48
                                 CHECK_01:
0001ab 27cc                      	CLR R28
0001ac 13bc                      	CPSE R27,R28
0001ad d047                      	RCALL SIGN
                                 
                                 
                                 BRANCH2:
0001ae 2f29                      	MOV R18,R25
0001af 0f23                      	ADD R18,R19
0001b0 dfc2                      	RCALL DATA_WRITE
                                 
                                 BRANCH3:
0001b1 2f2e                      	MOV R18,R30
0001b2 0f23                      	ADD R18,R19
0001b3 dfbf                      	RCALL DATA_WRITE
                                 
0001b4 ec20                      	LDI R18,0XC0
0001b5 dfab                      	RCALL COMMAND_WRITE
0001b6 d09c                      	RCALL DELAY_MS
                                  
0001b7 9508                      	RET
                                 ;--------------------------------------------------------------------------------------------------------------
                                 MAP:
                                 ;(1.48*X-493)
0001b8 e904                      	LDI R16,0X94;148
0001b9 e010                      	LDI R17,0X00
0001ba d011                      	RCALL MULTI
0001bb 2d12                      	MOV R17,RES1  ;R2
0001bc 2d23                      	MOV R18,RES2  ;R3
0001bd e040                      	LDI R20,0X00
0001be 2700                      	CLR R16
0001bf 2422                      	CLR RES1
0001c0 2433                      	CLR RES2
0001c1 2444                      	CLR RES3
0001c2 2455                      	CLR RES4
0001c3 e6a4                      	LDI R26,LOW(NUM1)
0001c4 e0b0                      	LDI R27,HIGH(NUM1)
0001c5 e0c0                      	LDI R28,0X00
0001c6 d01d                      	RCALL DIV
                                 
0001c7 5e0d                      	SUBI R16,LOW(SUB_NUM)
0001c8 4071                      	SBCI R23,HIGH(SUB_NUM)
0001c9 2f17                      	MOV R17,R23
0001ca f08a                      	BRMI COMPLEMENT
0001cb 9508                      	RET
                                 ;--------------------------------------------------------------------------------------------------------------
                                 MULTI:
0001cc 2733                      	CLR R19
0001cd 9ff1                      	MUL R31,R17;HIGH
0001ce 2c40                      	MOV RES3,R0
0001cf 2c51                      	MOV RES4,R1
                                 
0001d0 9fe0                      	MUL R30,R16;LOW
0001d1 2c20                      	MOV RES1,R0
0001d2 2c31                      	MOV RES2,R1
                                 
0001d3 9ff0                      	MUL R31,R16
0001d4 0c30                      	ADD RES2,R0
0001d5 1c41                      	ADC RES3,R1
0001d6 1e53                      	ADC RES4,R19
                                 
0001d7 9fe1                      	MUL R30,R17
0001d8 0c30                      	ADD RES2,R0
0001d9 1c41                      	ADC RES3,R1
0001da 1e53                      	ADC RES4,R19
0001db 9508                      	RET
                                 ;--------------------------------------------------------------------------------------------------------------
                                 COMPLEMENT:
0001dc 9500                      	COM R16
0001dd 9510                      	COM R17
0001de e021                      	LDI R18,0X01
0001df 0f02                      	ADD R16,R18
0001e0 e020                      	LDI R18,0X00
0001e1 1f12                      	ADC R17,R18
0001e2 e061                      	LDI R22,0X01
0001e3 9508                      	RET
                                 ;--------------------------------------------------------------------------------------------------------------
                                 
                                 DIV:
0001e4 2700                      	CLR R16
0001e5 2777                      	CLR R23
0001e6 27dd                      	CLR R29
0001e7 2733                      	CLR R19
0001e8 2766                      	CLR R22
0001e9 e051                      	LDI R21,0X01
0001ea 2788                      	CLR R24
                                 NEW_01:
0001eb 1b1a                      	SUB R17,R26
0001ec 0b2b                      	SBC R18,R27
0001ed 0b4c                      	SBC R20,R28
0001ee 0b36                      	SBC R19,R22
0001ef f40a                      	BRPL LOAD
0001f0 9508                      	RET	
                                 
                                 LOAD:
0001f1 0f05                      	ADD R16,R21;
0001f2 1f78                      	ADC R23,R24
0001f3 1fd8                      	ADC R29,R24
0001f4 cff6                      	RJMP NEW_01
                                 ;----------------------------------------------------------------------------------------------------------------
                                 SIGN:
0001f5 2722                      	CLR R18
0001f6 e060                      	LDI R22,0X00
0001f7 9120 0152                 	LDS R18,A0_SIGN
0001f9 1326                      	CPSE R18,R22
0001fa f412                      	BRPL MINS
0001fb d004                      	RCALL PLUS
                                 JUMP_01:
0001fc 9508                      	RET
                                 
                                 MINS:
0001fd e22d                      	LDI R18,'-'
0001fe df74                      	RCALL DATA_WRITE
0001ff cffc                      	RJMP JUMP_01
                                 PLUS:
000200 e22b                      	LDI R18,'+'
000201 df71                      	RCALL DATA_WRITE
000202 cff9                      	RJMP JUMP_01
                                 ;----------------------------------------------------------------------------------------------------------------
                                 POWER:
000203 2f02                      	MOV R16,R18
000204 2f1b                      	MOV R17,R27
000205 2ffb                      	MOV R31,R27
000206 2fe2                      	MOV R30,R18
000207 dfc4                      	RCALL MULTI
000208 9508                      	RET
                                 ;----------------------------------------------------------------------------------------------------------------
                                 SQURE_ROOT:
000209 2744                      	CLR R20
00020a 2777                      	CLR R23
00020b e064                      	LDI R22,0x04;HIGH BYTE
00020c 2f26                      	MOV R18,R22
00020d 27dd                      	CLR R29	;LOW BYTE
00020e 27cc                      	CLR R28	;HIGH BYTE
00020f c003                      	RJMP GONE2
                                 GONE1:
000210 2fc4                      	MOV R28,R20
000211 9566                      	LSR R22
000212 f069                      	BREQ GONE3
                                 GONE2:
000213 2f26                      	MOV R18,R22
000214 2bc2                      	OR R28,R18
000215 2f2d                      	MOV R18,R29
000216 2fbc                      	MOV R27,R28
000217 dfeb                      	RCALL POWER
000218 1582                      	CP R24,RES1
000219 0593                      	CPC R25,RES2
00021a 05a4                      	CPC R26,RES3
00021b 0575                      	CPC R23,RES4
00021c f39a                      	BRMI GONE1
00021d d000                      	RCALL SAVE1
                                 SAVE1:
00021e 2f4c                      	MOV R20,R28
00021f cff0                      	RJMP GONE1
                                 GONE3:
000220 2f54                      	MOV R21,R20;HIGH BYTE
000221 2744                      	CLR R20
000222 e860                      	LDI R22,0X80
000223 2f26                      	MOV R18,R22
000224 27dd                      	CLR R29
000225 2fc5                      	MOV R28,R21
000226 c003                      	RJMP GONE5
                                 GONE4:
000227 2fd4                      	MOV R29,R20
000228 9566                      	LSR R22
000229 f069                      	BREQ DONE
                                 GONE5:
00022a 2f26                      	MOV R18,R22
00022b 2bd2                      	OR R29,R18
00022c 2f2d                      	MOV R18,R29
00022d 2fbc                      	MOV R27,R28
00022e dfd4                      	RCALL POWER
00022f 1582                      	CP R24,RES1
000230 0593                      	CPC R25,RES2
000231 05a4                      	CPC R26,RES3
000232 0575                      	CPC R23,RES4
000233 f39a                      	BRMI GONE4
000234 d000                      	RCALL SAVE2
                                 SAVE2:
000235 2f4d                      	MOV R20,R29
000236 cff0                      	RJMP GONE4
                                 DONE:
000237 9508                      	RET
                                 ;----------------------------------------------------------------------------------------------------------------
                                 ADD_VALUE:
000238 9100 014f                 	LDS R16,SQURE_LOW
00023a 9130 0150                 	LDS R19,SQURE_MID
00023c e050                      	LDI R21,0X00
00023d 0f01                      	ADD R16,R17
00023e 1f32                      	ADC R19,R18
00023f 1f54                      	ADC R21,R20
000240 9508                      	RET
                                 ;----------------------------------------------------------------------------------------------------------------
                                 SUB_VALUE:
000241 9100 014f                 	LDS R16,SQURE_LOW
000243 9130 0150                 	LDS R19,SQURE_MID
000245 e050                      	LDI R21,0X00
000246 1b01                      	SUB R16,R17
000247 0b32                      	SBC R19,R18
000248 0b54                      	SBC R21,R20
000249 940c 00e6                 	JMP ROOT2
                                 ;----------------------------------------------------------------------------------------------------------------
                                 
                                 ;-----------------------------------------------------------------------------------------------------
                                 ;DELAY SHORT
                                 DELAY_SHORT:
00024b 0000                      	NOP
00024c 0000                      	NOP
00024d 9508                      	RET
                                 ;------------------------------------------------------------------------------------------------------
                                 ;DELAY MICRO SECONDS
                                 DELAY_US:
00024e e54a                      	LDI R20,90
                                 LOOP2:
00024f dffb                      	RCALL DELAY_SHORT
000250 954a                      	DEC R20
000251 f7e9                      	BRNE LOOP2
000252 9508                      	RET
                                 ;------------------------------------------------------------------------------------------------------
                                 ;DELAY MILISECONDS
                                 DELAY_MS:
000253 e258                      	LDI R21,40
                                 LOOP3:
000254 dff9                      	RCALL DELAY_US
000255 955a                      	DEC R21
000256 f7e9                      	BRNE LOOP3
000257 9508                      	RET
                                 ;------------------------------------------------------------------------------------------------------
                                 ;DELAY_SECONDS
                                 DELAY_SECONDS:
000258 ef4f                      	LDI R20,255
                                 LOOP4:
000259 ef5f                      	LDI R21,255
                                 LOOP5:
00025a e560                      	LDI R22,80
                                 LOOP6:
00025b 956a                      	DEC R22
00025c f7f1                      	BRNE LOOP6
00025d 955a                      	DEC R21
00025e f7d9                      	BRNE LOOP5
00025f 954a                      	DEC R20
000260 f7c1                      	BRNE LOOP4
000261 9508                      	RET
                                 ;------------------------------------------------------------------------------------------------------
                                 CLEAR:
000262 2700                      	CLR R16
000263 2711                      	CLR R17
000264 2722                      	CLR R18
000265 2733                      	CLR R19
000266 2744                      	CLR R20
000267 2755                      	CLR R21
000268 2766                      	CLR R22
000269 2777                      	CLR R23
00026a 2788                      	CLR R24
00026b 2799                      	CLR R25
00026c 27aa                      	CLR R26
00026d 27bb                      	CLR R27
00026e 27cc                      	CLR R28
00026f 27dd                      	CLR R29
000270 27ee                      	CLR R30
000271 27ff                      	CLR R31
000272 9508                      	RET
                                 ;------------------------------------------------------------------------------------------------------


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   0 r0 :   4 r1 :   4 r2 :  19 r3 :  21 r4 :  19 
r5 :  11 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  46 r17:  50 r18:  65 r19:  17 r20:  31 
r21:  21 r22:  20 r23:  12 r24:  10 r25:   7 r26:   8 r27:  27 r28:  14 
r29:  12 r30:  23 r31:  16 
Registers used: 22 out of 35 (62.9%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  11 add   :   8 adiw  :   0 and   :   1 
andi  :   4 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   3 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   5 
brne  :   6 brpl  :   2 brsh  :   5 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   1 cbi   :  14 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  58 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :   8 cpc   :   6 
cpi   :   2 cpse  :   2 dec   :   5 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   2 jmp   :   2 
ld    :   0 ldd   :   0 ldi   :  79 lds   :  44 lpm   :   0 lsl   :   0 
lsr   :   2 mov   :  48 movw  :   0 mul   :   4 muls  :   0 mulsu :   0 
neg   :   0 nop   :   2 or    :   2 ori   :   0 out   :   6 pop   :   0 
push  :   0 rcall :  82 ret   :  18 reti  :   0 rjmp  :  20 rol   :   0 
ror   :   0 sbc   :   7 sbci  :   1 sbi   :  19 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   3 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  44 
sub   :   3 subi  :   3 swap  :   2 tst   :   0 wdr   :   0 
Instructions used: 39 out of 113 (34.5%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004e6   1254      0   1254   32768   3.8%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
