
AVRASM ver. 2.2.8  E:\OneDrive - University of Peradeniya\Project\Digital Spirit Leveler\Digital-Spirit-Leveler\Code\Digital Spirit Leveler\Digital Spirit Leveler\main.asm Fri Jan 05 20:27:30 2024

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
E:\OneDrive - University of Peradeniya\Project\Digital Spirit Leveler\Digital-Spirit-Leveler\Code\Digital Spirit Leveler\Digital Spirit Leveler\main.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\M328PDEF.INC'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
E:\OneDrive - University of Peradeniya\Project\Digital Spirit Leveler\Digital-Spirit-Leveler\Code\Digital Spirit Leveler\Digital Spirit Leveler\main.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\M328PDEF.INC'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; DIGITAL_LEVEL_LCD.asm
                                 ;
                                 ; Created: 12/28/2023 1:43:29 PM
                                 ; Author : SAHAN SIRIWARDENA
                                 ;
                                 
                                 
                                 .INCLUDE "M328PDEF.INC"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .CSEG
                                 .ORG 0X00
                                 .def RES1 = R2
                                 .def RES2 = R3
                                 .def RES3 = R4
                                 .def RES4 = R5
                                 .EQU A0_LOW = 0X0145
                                 .EQU A0_HIGH = 0X0146
                                 .EQU C0_LOW = 0X0147
                                 .EQU C0_HIGH = 0X0148
                                 .EQU B0_LOW = 0X0149
                                 .EQU B0_HIGH = 0X014A
                                 .EQU A0_SQURE_LOW=0X014B
                                 .EQU A0_SQURE_MID=0X014C
                                 .EQU A0_SQURE_HIGH=0X014D
                                 .EQU C0_SQURE_LOW=0X014E
                                 .EQU C0_SQURE_MID=0X014F
                                 .EQU C0_SQURE_HIGH=0X0150
                                 .EQU B0_SQURE_LOW=0X0151
                                 .EQU B0_SQURE_MID=0X0152
                                 .EQU B0_SQURE_HIGH=0X0153
                                 .EQU SQURE_LOW=0X0154
                                 .EQU SQURE_MID=0X0155
                                 .EQU SQURE_HIGH=0X0156
                                 
                                 
                                 .EQU A0_SIGN=0X0157
                                 .EQU C0_SIGN=0X0158
                                 .EQU B0_SIGN=0X0159
                                 .EQU X_FINAL=0X015A
                                 .EQU Y_FINAL=0X015B
                                 .EQU Z_FINAL=0X015C
                                 
                                 .EQU DOWN_ROOT_01_L=0X015D
                                 .EQU DOWN_ROOT_01_M=0X015E
                                 .EQU DOWN_ROOT_01_H=0X015F
                                 .EQU DOWN_ROOT_02_L=0X0160
                                 .EQU DOWN_ROOT_02_M=0X0161
                                 .EQU DOWN_ROOT_02_H=0X0162
                                 .EQU DOWN_ROOT_03_L=0X0163
                                 .EQU DOWN_ROOT_03_M=0X0164
                                 .EQU DOWN_ROOT_03_H=0X0165
                                 .EQU TEMP_L=0X0166
                                 .EQU TEMP_M=0X0167
                                 .EQU TEMP_H=0X0168
                                 .EQU R0_SIGN=0X0169
                                 
                                 
                                 .EQU NUM1=0X64  ;100
                                 .EQU SUB_NUM=0X1ED;493
                                 .EQU PI=0X13A
                                 .EQU UPPER_MULTI=0X3840
                                 
                                 
                                 .EQU NINTY = 0B01011010
                                 .EQU SEVENTY = 0B01000110
                                 .EQU SIXTYNINE = 0B01000101
                                 .EQU FOURTY = 0B00101000
                                 .EQU THIRTYNINE = 0B00100111
                                 .EQU FIVE = 0B00000101
                                 
                                 ;-------------------------------!!!!!TESTING PURPOSE ONLY!!!!!-----------------------------------
                                 ;.EQU CHECK1 =0X32 ;50
                                 ;.EQU CHECK2 =0X14 ;20
                                 ;------------------------------------------------------------------------------------------------
                                 
                                 ;------------------------------------------------------------------------------------------------
                                 ;DEFINE THE I/O PINS
                                 START:
000000 e400                      	LDI R16,0X40
000001 9300 007c                 	STS ADMUX,R16 ;SET VCC AS REFERENCE,RIGHT-JUSTIFIED DATA,ADC0
000003 e807                      	LDI R16,0B10000111
000004 9300 007a                 	STS ADCSRA,R16 ;ENABLE ADC,ADC PRESCALER CLK/128
                                 	
000006 ef0f                      	LDI R16,0XFF
000007 b90a                      	OUT DDRD,R16 ;SET PORT D O/P DATA
000008 ef0f                      	LDI R16,0XFF 
000009 b904                      	OUT DDRB,R16 ;SET PORT B O/P COMMOND
00000a 9828                      	CBI PORTB,0  ;EN=0
00000b d38f                      	RCALL DELAY_MS ;WAIT FOR LCD POWER ON
00000c d28f                      	RCALL LCD_INIT ;INTIALIZING THE LCD
                                 
                                 ;--------------------------------------------------------------------------------------------------
                                 ;MAIN FUNCTION
                                 MAIN:
00000d e400                      	LDI R16,0X40
00000e 9300 007c                 	STS ADMUX,R16 ;SET VCC AS REFERENCE,RIGHT-JUSTIFIED DATA,ADC0
                                 READ_ADC_01:	
000010 ec17                      	LDI R17,0XC7
000011 9310 007a                 	STS ADCSRA,R17 ;SET ADSC IN ADCSRA TO START CONVERSION
                                 LOOP_ADC1:		
000013 9100 007a                 	LDS R16,ADCSRA
000015 ff04                      	SBRS R16,4 ;SKIP JUMP WHEN CONVERTION IS DONE (FLAG SET)
000016 cffc                      	RJMP LOOP_ADC1
000017 ed17                      	LDI R17,0XD7
000018 9310 007a                 	STS ADCSRA,R17 ;TO SIGNAL 'READY-TO-BE-CLEARED' BY H/W
00001a 91e0 0078                 	LDS R30,ADCL ;GET THE LOW-BYTE RESULT FROM ADCL
00001c 91f0 0079                 	LDS R31,ADCH ;GET THE HIGH-BYTE RESULT FROM ADCH
00001e 93e0 0145                 	STS A0_LOW,R30
000020 93f0 0146                 	STS A0_HIGH,R31
000022 e010                      	LDI R17,0X00
000023 9310 007a                 	STS ADCSRA,R17 ;TO SIGNAL 'READY-TO-BE-CLEARED' BY H/W
                                 
000025 e401                      	LDI R16,0X41
000026 9300 007c                 	STS ADMUX,R16 ;SET VCC AS REFERENCE,RIGHT-JUSTIFIED DATA,ADC0
                                 READ_ADC_02:	
000028 ec17                      	LDI R17,0XC7
000029 9310 007a                 	STS ADCSRA,R17 ;SET ADSC IN ADCSRA TO START CONVERSION
                                 LOOP_ADC2:		
00002b 9100 007a                 	LDS R16,ADCSRA
00002d ff04                      	SBRS R16,4 ;SKIP JUMP WHEN CONVERTION IS DONE (FLAG SET)
00002e cffc                      	RJMP LOOP_ADC2
00002f ed17                      	LDI R17,0XD7
000030 9310 007a                 	STS ADCSRA,R17 ;TO SIGNAL 'READY-TO-BE-CLEARED' BY H/W
000032 91e0 0078                 	LDS R30,ADCL ;GET THE LOW-BYTE RESULT FROM ADCL
000034 91f0 0079                 	LDS R31,ADCH ;GET THE HIGH-BYTE RESULT FROM ADCH
000036 93e0 0147                 	STS C0_LOW,R30
000038 93f0 0148                 	STS C0_HIGH,R31
00003a e010                      	LDI R17,0X00
00003b 9310 007a                 	STS ADCSRA,R17 ;TO SIGNAL 'READY-TO-BE-CLEARED' BY H/W
                                 
00003d e402                      	LDI R16,0X42
00003e 9300 007c                 	STS ADMUX,R16 ;SET VCC AS REFERENCE,RIGHT-JUSTIFIED DATA,ADC0
                                 READ_ADC_03:	
000040 ec17                      	LDI R17,0XC7
000041 9310 007a                 	STS ADCSRA,R17 ;SET ADSC IN ADCSRA TO START CONVERSION
                                 LOOP_ADC3:		
000043 9100 007a                 	LDS R16,ADCSRA
000045 ff04                      	SBRS R16,4 ;SKIP JUMP WHEN CONVERTION IS DONE (FLAG SET)
000046 cffc                      	RJMP LOOP_ADC3
000047 ed17                      	LDI R17,0XD7
000048 9310 007a                 	STS ADCSRA,R17 ;TO SIGNAL 'READY-TO-BE-CLEARED' BY H/W
00004a 91e0 0078                 	LDS R30,ADCL ;GET THE LOW-BYTE RESULT FROM ADCL
00004c 91f0 0079                 	LDS R31,ADCH ;GET THE HIGH-BYTE RESULT FROM ADCH
00004e 93e0 0149                 	STS B0_LOW,R30
000050 93f0 014a                 	STS B0_HIGH,R31
000052 e010                      	LDI R17,0X00
000053 9310 007a                 	STS ADCSRA,R17 ;TO SIGNAL 'READY-TO-BE-CLEARED' BY H/W
                                 
                                 
000055 91e0 0145                 	LDS R30,A0_LOW
000057 91f0 0146                 	LDS R31,A0_HIGH
000059 d2a6                      	RCALL MAP
                                 
                                 	;----------------------------------------------------------------------------------------------
                                 
00005a 9360 0157                 	STS A0_SIGN,R22
00005c 9300 0145                 	STS A0_LOW,R16
00005e 9310 0146                 	STS A0_HIGH,R17
000060 d349                      	RCALL CLEAR
                                 	;-----------------------------------------------------------------------------------------------
                                 
000061 91e0 0147                 	LDS R30,C0_LOW
000063 91f0 0148                 	LDS R31,C0_HIGH
000065 d29a                      	RCALL MAP
000066 9360 0158                 	STS C0_SIGN,R22
000068 9300 0147                 	STS C0_LOW,R16
00006a 9310 0148                 	STS C0_HIGH,R17
00006c d33d                      	RCALL CLEAR
                                 	;-----------------------------------------------------------------------------------------------
                                 
00006d 91e0 0149                 	LDS R30,B0_LOW
00006f 91f0 014a                 	LDS R31,B0_HIGH
000071 d28e                      	RCALL MAP
000072 9360 0159                 	STS B0_SIGN,R22
000074 9300 0149                 	STS B0_LOW,R16
000076 9310 014a                 	STS B0_HIGH,R17
000078 d331                      	RCALL CLEAR
                                 ;-------------------------------!!!!!TESTING PURPOSE ONLY!!!!!-------------------------------------
                                 	;LDI R18,LOW(CHECK1)
                                 	;STS A0_LOW,R18
                                 	;LDI R18,HIGH(CHECK1)
                                 	;STS A0_HIGH,R18
                                 ;--------------------------------------------------------------------------------------------------
                                 
000079 9120 0145                 	LDS R18,A0_LOW
00007b 91b0 0146                 	LDS R27,A0_HIGH
00007d d2cd                      	RCALL POWER
00007e 9220 014b                 	STS A0_SQURE_LOW,RES1;LOW BYTE
000080 9230 014c                 	STS A0_SQURE_MID,RES2;MID BYTE
000082 9240 014d                 	STS A0_SQURE_HIGH,RES3;HIGH BYTE
000084 d325                      	RCALL CLEAR
000085 2422                      	CLR RES1
000086 2433                      	CLR RES2
000087 2444                      	CLR RES3
000088 2455                      	CLR RES4
                                 
                                 ;-------------------------------!!!!!TESTING PURPOSE ONLY!!!!!-------------------------------------
                                 
                                 	;LDI R16,LOW(CHECK2)
                                 	;STS C0_LOW,R16
                                 	;LDI R16,HIGH(CHECK2)
                                 	;STS C0_HIGH,R16
                                 
                                 ;--------------------------------------------------------------------------------------------------
                                 
000089 9120 0147                 	LDS R18,C0_LOW
00008b 91b0 0148                 	LDS R27,C0_HIGH
00008d d2bd                      	RCALL POWER
00008e 9220 014e                 	STS C0_SQURE_LOW,RES1;LOW BYTE
000090 9230 014f                 	STS C0_SQURE_MID,RES2;MID BYTE
000092 9240 0150                 	STS C0_SQURE_HIGH,RES3;HIGH BYTE
000094 d315                      	RCALL CLEAR
000095 2422                      	CLR RES1
000096 2433                      	CLR RES2
000097 2444                      	CLR RES3
000098 2455                      	CLR RES4
                                 
                                 ;--------------------------------------------------------------------------------------------------
                                 
000099 9120 0149                 	LDS R18,B0_LOW
00009b 91b0 014a                 	LDS R27,B0_HIGH
00009d d2ad                      	RCALL POWER
00009e 9220 0151                 	STS B0_SQURE_LOW,RES1;LOW BYTE
0000a0 9230 0152                 	STS B0_SQURE_MID,RES2;MID BYTE
0000a2 9240 0153                 	STS B0_SQURE_HIGH,RES3;HIGH BYTE
0000a4 d305                      	RCALL CLEAR
0000a5 2422                      	CLR RES1
0000a6 2433                      	CLR RES2
0000a7 2444                      	CLR RES3
0000a8 2455                      	CLR RES4
                                 
                                 ;--------------------------------------------------------------------------------------------------
                                 ;SQRT(A^2+C^2)
0000a9 9100 014b                 	LDS R16,A0_SQURE_LOW
0000ab 9110 014c                 	LDS R17,A0_SQURE_MID
0000ad 9120 014d                 	LDS R18,A0_SQURE_HIGH
                                 
0000af 9130 014e                 	LDS R19,C0_SQURE_LOW
0000b1 9140 014f                 	LDS R20,C0_SQURE_MID
0000b3 9150 0150                 	LDS R21,C0_SQURE_HIGH
                                 
0000b5 1f03                      	ADC R16,R19
0000b6 1f14                      	ADC R17,R20
0000b7 1f25                      	ADC R18,R21
                                 
0000b8 2f80                      	MOV R24,R16
0000b9 2f91                      	MOV R25,R17
0000ba 2fa2                      	MOV R26,R18
0000bb d295                      	RCALL SQURE_ROOT
                                 
0000bc 9340 015d                 	STS DOWN_ROOT_01_L,R20
0000be 9350 015e                 	STS DOWN_ROOT_01_M,R21
0000c0 d2e9                      	RCALL CLEAR
                                 
                                 ;--------------------------------------------------------------------------------------------------
                                 ;SQRT(B^2+C^2)
0000c1 9100 0151                 	LDS R16,B0_SQURE_LOW
0000c3 9110 0152                 	LDS R17,B0_SQURE_MID
0000c5 9120 0153                 	LDS R18,B0_SQURE_HIGH
                                 
0000c7 9130 014e                 	LDS R19,C0_SQURE_LOW
0000c9 9140 014f                 	LDS R20,C0_SQURE_MID
0000cb 9150 0150                 	LDS R21,C0_SQURE_HIGH
                                 
0000cd 1f03                      	ADC R16,R19
0000ce 1f14                      	ADC R17,R20
0000cf 1f25                      	ADC R18,R21
                                 
0000d0 2f80                      	MOV R24,R16
0000d1 2f91                      	MOV R25,R17
0000d2 2fa2                      	MOV R26,R18
0000d3 d27d                      	RCALL SQURE_ROOT
                                 
0000d4 9340 0160                 	STS DOWN_ROOT_02_L,R20
0000d6 9350 0161                 	STS DOWN_ROOT_02_M,R21
0000d8 d2d1                      	RCALL CLEAR
                                 ;--------------------------------------------------------------------------------------------------
                                 ;SQRT(A^2+B^2)
0000d9 9100 014b                 	LDS R16,A0_SQURE_LOW
0000db 9110 014c                 	LDS R17,A0_SQURE_MID
0000dd 9120 014d                 	LDS R18,A0_SQURE_HIGH
                                 
0000df 9130 0151                 	LDS R19,B0_SQURE_LOW
0000e1 9140 0152                 	LDS R20,B0_SQURE_MID
0000e3 9150 0153                 	LDS R21,B0_SQURE_HIGH
                                 
0000e5 1f03                      	ADC R16,R19
0000e6 1f14                      	ADC R17,R20
0000e7 1f25                      	ADC R18,R21
                                 
0000e8 2f80                      	MOV R24,R16
0000e9 2f91                      	MOV R25,R17
0000ea 2fa2                      	MOV R26,R18
0000eb d265                      	RCALL SQURE_ROOT
                                 
0000ec 9340 0163                 	STS DOWN_ROOT_03_L,R20
0000ee 9350 0164                 	STS DOWN_ROOT_03_M,R21
0000f0 d2b9                      	RCALL CLEAR
                                 ;------------------------------------------X-----------------------------------------
                                 
                                 	;-----25XD1^2------
0000f1 e109                      	LDI R16,0X19;
0000f2 e010                      	LDI R17,0X00
0000f3 91e0 015d                 	LDS R30,DOWN_ROOT_01_L
0000f5 91f0 015e                 	LDS R31,DOWN_ROOT_01_M
0000f7 91b0 015f                 	LDS R27,DOWN_ROOT_01_H
0000f9 93e0 0166                 	STS TEMP_L,R30
0000fb 93f0 0167                 	STS TEMP_M,R31
0000fd 93b0 0168                 	STS TEMP_H,R27
0000ff 27bb                      	CLR R27
000100 d213                      	RCALL MULTI
000101 9220 015d                 	STS DOWN_ROOT_01_L,RES1;LOW BYTE
000103 9230 015e                 	STS DOWN_ROOT_01_M,RES2;MID BYTE
000105 9240 015f                 	STS DOWN_ROOT_01_H,RES3;HIGH BYTE
000107 d2a2                      	RCALL CLEAR
000108 2422                      	CLR RES1
000109 2433                      	CLR RES2
00010a 2444                      	CLR RES3
00010b 2455                      	CLR RES4
                                 	;------------------
                                 	;-----80XB0^2------
00010c e500                      	LDI R16,0X50;
00010d e010                      	LDI R17,0X00
00010e 91e0 0151                 	LDS R30,B0_SQURE_LOW
000110 91f0 0152                 	LDS R31,B0_SQURE_MID
000112 d201                      	RCALL MULTI
000113 9220 0151                 	STS B0_SQURE_LOW,RES1;LOW BYTE
000115 9230 0152                 	STS B0_SQURE_MID,RES2;MID BYTE
000117 9240 0153                 	STS B0_SQURE_HIGH,RES3;HIGH BYTE
000119 2422                      	CLR RES1
00011a 2433                      	CLR RES2
00011b 2444                      	CLR RES3
00011c 2455                      	CLR RES4
00011d d28c                      	RCALL CLEAR
                                 	;-----(80XB0^2)/3------
00011e 9110 0151                 	LDS R17,B0_SQURE_LOW
000120 9120 0152                 	LDS R18,B0_SQURE_MID
000122 9140 0153                 	LDS R20,B0_SQURE_HIGH
000124 e0a3                      	LDI R26,0X03
000125 e0b0                      	LDI R27,0X00
000126 e0c0                      	LDI R28,0X00
000127 d204                      	RCALL DIV
000128 9300 0151                 	STS B0_SQURE_LOW,R16;LOW BYTE
00012a 9370 0152                 	STS B0_SQURE_MID,R23;MID BYTE
00012c 93d0 0153                 	STS B0_SQURE_HIGH,R29;HIGH BYTE
                                 	;-----ADD----------------
00012e 2f10                      	MOV R17,R16
00012f 2f27                      	MOV R18,R23
000130 2f4d                      	MOV R20,R29
000131 9150 015d                 	LDS R21,DOWN_ROOT_01_L
000133 9160 015e                 	LDS R22,DOWN_ROOT_01_M
000135 9170 015f                 	LDS R23,DOWN_ROOT_01_H
000137 e080                      	LDI R24,0X00
000138 0f15                      	ADD R17,R21
000139 1f26                      	ADC R18,R22
00013a 1f47                      	ADC R20,R23
00013b 9310 0154                 	STS SQURE_LOW,R17;LOW BYTE
00013d 9320 0155                 	STS SQURE_MID,R18;MID BYTE
00013f 9340 0156                 	STS SQURE_HIGH,R20;HIGH BYTE
000141 9180 0154                 	LDS R24,SQURE_LOW
000143 9190 0155                 	LDS R25,SQURE_MID
000145 91a0 0156                 	LDS R26,SQURE_HIGH
000147 d209                      	RCALL SQURE_ROOT
                                 ROOT1:
000148 9340 0154                 	STS SQURE_LOW,R20
00014a 9350 0155                 	STS SQURE_MID,R21
00014c d25d                      	RCALL CLEAR
00014d 2422                      	CLR RES1
00014e 2433                      	CLR RES2
00014f 2444                      	CLR RES3
000150 2455                      	CLR RES4
                                 	;----------3C------------------------
000151 e003                      	LDI R16,0X03;
000152 e010                      	LDI R17,0X00
000153 91e0 0166                 	LDS R30,TEMP_L
000155 91f0 0167                 	LDS R31,TEMP_M
000157 d1bc                      	RCALL MULTI
000158 2d12                      	MOV R17,RES1  ;R2 ;LOW BYTE
000159 2d23                      	MOV R18,RES2  ;R3 ;MID BYTE
00015a 2d44                      	MOV R20,RES3  ;R4 ;HIGH BYTE
                                 	;--------------3C+/-X-----------------------
00015b 9100 0159                 	LDS R16,B0_SIGN
00015d 9300 0169                 	STS R0_SIGN,R16
                                 
00015f e000                      	LDI R16,0X00
000160 ff00                      	SBRS R16,0
000161 c00a                      	RJMP BRANCH_01
000162 9100 0154                 	LDS R16,SQURE_LOW
000164 9130 0155                 	LDS R19,SQURE_MID
000166 e050                      	LDI R21,0X00
000167 1b01                      	SUB R16,R17
000168 0b32                      	SBC R19,R18
000169 0b54                      	SBC R21,R20
00016a 940c 016d                 	JMP ROOT2
                                 BRANCH_01:	
00016c d213                      	RCALL ADD_VALUE
                                 ROOT2:
                                 	;-------(3C+X)*PI---------------------------
00016d 2f13                      	MOV R17,R19
00016e e3ea                      	LDI R30,LOW(PI)
00016f e0f1                      	LDI R31,HIGH(PI)
000170 d1a3                      	RCALL MULTI
000171 9220 0154                 	STS SQURE_LOW,R2;LOW BYTE
000173 9230 0155                 	STS SQURE_MID,R3;MID BYTE
000175 9240 0156                 	STS SQURE_HIGH,R4;HIGH BYTE
                                 	;-------8*18000*A0---------------------------
000177 9100 0149                 	LDS R16,B0_LOW
000179 9110 014a                 	LDS R17,B0_HIGH
00017b e0ea                      	LDI R30,0X0A
00017c e0f0                      	LDI R31,0X00
00017d d196                      	RCALL MULTI
00017e 2d02                      	MOV R16,RES1
00017f 2d13                      	MOV R17,RES2
000180 e4e0                      	LDI R30,LOW(UPPER_MULTI)
000181 e3f8                      	LDI R31,HIGH(UPPER_MULTI)
000182 d191                      	RCALL MULTI
                                 ;-------FINAL--------------------------
000183 2d12                      	MOV R17,RES1
000184 2d23                      	MOV R18,RES2
000185 2d44                      	MOV R20,RES3
000186 91a0 0154                 	LDS R26,SQURE_LOW
000188 91b0 0155                 	LDS R27,SQURE_MID
00018a 91c0 0156                 	LDS R28,SQURE_HIGH
00018c d19f                      	RCALL DIV
                                 ;-------------------------FINAL VALUE IS SAVE IN THE RELAVANT MEMORY ADDRESS--------------------
00018d 9300 015a                 	STS X_FINAL,R16
00018f d21a                      	RCALL CLEAR
000190 9100 015a                 	LDS R16,X_FINAL
                                 
                                 
                                 ;------------------------------------------Y-----------------------------------------
                                 
                                 	;-----25XD1^2------
000192 e109                      	LDI R16,0X19;
000193 e010                      	LDI R17,0X00
000194 91e0 0160                 	LDS R30,DOWN_ROOT_02_L
000196 91f0 0161                 	LDS R31,DOWN_ROOT_02_M
000198 91b0 0162                 	LDS R27,DOWN_ROOT_02_H
00019a 93e0 0166                 	STS TEMP_L,R30
00019c 93f0 0167                 	STS TEMP_M,R31
00019e 93b0 0168                 	STS TEMP_H,R27
0001a0 27bb                      	CLR R27
0001a1 d172                      	RCALL MULTI
0001a2 9220 0160                 	STS DOWN_ROOT_02_L,RES1;LOW BYTE
0001a4 9230 0161                 	STS DOWN_ROOT_02_M,RES2;MID BYTE
0001a6 9240 0162                 	STS DOWN_ROOT_02_H,RES3;HIGH BYTE
0001a8 d201                      	RCALL CLEAR
0001a9 2422                      	CLR RES1
0001aa 2433                      	CLR RES2
0001ab 2444                      	CLR RES3
0001ac 2455                      	CLR RES4
                                 	;------------------
                                 	;-----80XB0^2------
0001ad e500                      	LDI R16,0X50;
0001ae e010                      	LDI R17,0X00
0001af 91e0 014b                 	LDS R30,A0_SQURE_LOW
0001b1 91f0 014c                 	LDS R31,A0_SQURE_MID
0001b3 d160                      	RCALL MULTI
0001b4 9220 014b                 	STS A0_SQURE_LOW,RES1;LOW BYTE
0001b6 9230 014c                 	STS A0_SQURE_MID,RES2;MID BYTE
0001b8 9240 014d                 	STS A0_SQURE_HIGH,RES3;HIGH BYTE
0001ba 2422                      	CLR RES1
0001bb 2433                      	CLR RES2
0001bc 2444                      	CLR RES3
0001bd 2455                      	CLR RES4
0001be d1eb                      	RCALL CLEAR
                                 	;-----(80XB0^2)/3------
0001bf 9110 014b                 	LDS R17,A0_SQURE_LOW
0001c1 9120 014c                 	LDS R18,A0_SQURE_MID
0001c3 9140 014d                 	LDS R20,A0_SQURE_HIGH
0001c5 e0a3                      	LDI R26,0X03
0001c6 e0b0                      	LDI R27,0X00
0001c7 e0c0                      	LDI R28,0X00
0001c8 d163                      	RCALL DIV
0001c9 9300 014b                 	STS A0_SQURE_LOW,R16;LOW BYTE
0001cb 9370 014c                 	STS A0_SQURE_MID,R23;MID BYTE
0001cd 93d0 014d                 	STS A0_SQURE_HIGH,R29;HIGH BYTE
                                 	;-----ADD----------------
0001cf 2f10                      	MOV R17,R16
0001d0 2f27                      	MOV R18,R23
0001d1 2f4d                      	MOV R20,R29
0001d2 9150 0160                 	LDS R21,DOWN_ROOT_02_L
0001d4 9160 0161                 	LDS R22,DOWN_ROOT_02_M
0001d6 9170 0162                 	LDS R23,DOWN_ROOT_02_H
0001d8 e080                      	LDI R24,0X00
0001d9 0f15                      	ADD R17,R21
0001da 1f26                      	ADC R18,R22
0001db 1f47                      	ADC R20,R23
0001dc 9310 0154                 	STS SQURE_LOW,R17;LOW BYTE
0001de 9320 0155                 	STS SQURE_MID,R18;MID BYTE
0001e0 9340 0156                 	STS SQURE_HIGH,R20;HIGH BYTE
0001e2 9180 0154                 	LDS R24,SQURE_LOW
0001e4 9190 0155                 	LDS R25,SQURE_MID
0001e6 91a0 0156                 	LDS R26,SQURE_HIGH
0001e8 d168                      	RCALL SQURE_ROOT
                                 ROOT3:
0001e9 9340 0154                 	STS SQURE_LOW,R20
0001eb 9350 0155                 	STS SQURE_MID,R21
0001ed d1bc                      	RCALL CLEAR
0001ee 2422                      	CLR RES1
0001ef 2433                      	CLR RES2
0001f0 2444                      	CLR RES3
0001f1 2455                      	CLR RES4
                                 	;----------3C------------------------
0001f2 e003                      	LDI R16,0X03;
0001f3 e010                      	LDI R17,0X00
0001f4 91e0 0166                 	LDS R30,TEMP_L
0001f6 91f0 0167                 	LDS R31,TEMP_M
0001f8 d11b                      	RCALL MULTI
0001f9 2d12                      	MOV R17,RES1  ;R2 ;LOW BYTE
0001fa 2d23                      	MOV R18,RES2  ;R3 ;MID BYTE
0001fb 2d44                      	MOV R20,RES3  ;R4 ;HIGH BYTE
                                 	;--------------3C+/-X-----------------------
0001fc 9100 0157                 	LDS R16,A0_SIGN
0001fe 9300 0169                 	STS R0_SIGN,R16
                                 
000200 e000                      	LDI R16,0X00
000201 ff00                      	SBRS R16,0
000202 c00a                      	RJMP BRANCH_02
000203 9100 0154                 	LDS R16,SQURE_LOW
000205 9130 0155                 	LDS R19,SQURE_MID
000207 e050                      	LDI R21,0X00
000208 1b01                      	SUB R16,R17
000209 0b32                      	SBC R19,R18
00020a 0b54                      	SBC R21,R20
00020b 940c 016d                 	JMP ROOT2
                                 BRANCH_02:	
00020d d172                      	RCALL ADD_VALUE
                                 ROOT4:
                                 	;-------(3C+X)*PI---------------------------
00020e 2f13                      	MOV R17,R19
00020f e3ea                      	LDI R30,LOW(PI)
000210 e0f1                      	LDI R31,HIGH(PI)
000211 d102                      	RCALL MULTI
000212 9220 0154                 	STS SQURE_LOW,R2;LOW BYTE
000214 9230 0155                 	STS SQURE_MID,R3;MID BYTE
000216 9240 0156                 	STS SQURE_HIGH,R4;HIGH BYTE
                                 	;-------8*18000*A0---------------------------
000218 9100 0149                 	LDS R16,B0_LOW
00021a 9110 014a                 	LDS R17,B0_HIGH
00021c e0ea                      	LDI R30,0X0A
00021d e0f0                      	LDI R31,0X00
00021e d0f5                      	RCALL MULTI
00021f 2d02                      	MOV R16,RES1
000220 2d13                      	MOV R17,RES2
000221 e4e0                      	LDI R30,LOW(UPPER_MULTI)
000222 e3f8                      	LDI R31,HIGH(UPPER_MULTI)
000223 d0f0                      	RCALL MULTI
                                 ;-------FINAL--------------------------
000224 2d12                      	MOV R17,RES1
000225 2d23                      	MOV R18,RES2
000226 2d44                      	MOV R20,RES3
000227 91a0 0154                 	LDS R26,SQURE_LOW
000229 91b0 0155                 	LDS R27,SQURE_MID
00022b 91c0 0156                 	LDS R28,SQURE_HIGH
00022d d0fe                      	RCALL DIV
                                 ;-------------------------FINAL VALUE IS SAVE IN THE RELAVANT MEMORY ADDRESS--------------------
00022e 9300 015b                 	STS Y_FINAL,R16
000230 d179                      	RCALL CLEAR
                                 
                                 ;------------------------------------------PRINTING-----------------------------------------------------
                                 	;CLEAR THE LCD 2ND LINE
000231 e220                      	LDI R18,' '
000232 d092                      	RCALL DATA_WRITE
000233 e220                      	LDI R18,' '
000234 d090                      	RCALL DATA_WRITE
000235 e220                      	LDI R18,' '
000236 d08e                      	RCALL DATA_WRITE
000237 e220                      	LDI R18,' '
000238 d08c                      	RCALL DATA_WRITE
000239 e220                      	LDI R18,' '
00023a d08a                      	RCALL DATA_WRITE
00023b ec20                      	LDI R18,0XC0
00023c d076                      	RCALL COMMAND_WRITE
00023d e528                      	LDI R18,'X'
00023e d086                      	RCALL DATA_WRITE
00023f e32a                      	LDI R18,':'
000240 d084                      	RCALL DATA_WRITE
000241 9100 015a                 	LDS R16,X_FINAL
000243 9130 0159                 	LDS R19,B0_SIGN
000245 9330 0169                 	STS R0_SIGN,R19
000247 2fe0                      	MOV R30,R16
000248 e330                      	LDI  R19,48
000249 d09d                      	RCALL ASCII
00024a d150                      	RCALL DELAY_MS
00024b d15e                      	RCALL CLEAR
                                 
                                 
00024c e220                      	LDI R18,' '
00024d d077                      	RCALL DATA_WRITE
00024e e529                      	LDI R18,'Y'
00024f d075                      	RCALL DATA_WRITE
000250 e32a                      	LDI R18,':'
000251 d073                      	RCALL DATA_WRITE
000252 9100 015b                 	LDS R16,Y_FINAL
000254 9130 0157                 	LDS R19,A0_SIGN
000256 9330 0169                 	STS R0_SIGN,R19
000258 2fe0                      	MOV R30,R16
000259 e330                      	LDI  R19,48
00025a d08c                      	RCALL ASCII
00025b d13f                      	RCALL DELAY_MS
00025c ec20                      	LDI R18,0XC0
00025d d055                      	RCALL COMMAND_WRITE
00025e d14b                      	RCALL CLEAR
                                 ;-----------------------------------------------------------------------------------------------
                                 
                                 ;IF YOU WANT TO THE GET THE FINAL VALUE AND THE SIGN OF THE FINAL VALUE YOU CAN USE "FINAL" MEMORY ADDRESS TO ACCESS THE FINAL VALUE AND THE SIGN CAN BE GET BY ACCESS "A0_SIGN"
                                 ;MEMORY ADDRESS IN THE SIGN MEMORY "1" REPRESENT NEGATIVE AS WELL AS "0" REPRESENT THE POSITIVE 
                                 
                                 	
                                 	
                                 	;REMOVE PREVIOUS BULB VALUES
00025f 9858                      	CBI PORTD, 0
000260 9859                      	CBI PORTD, 1
000261 985a                      	CBI PORTD, 2
000262 985b                      	CBI PORTD, 3
                                 
000263 982a                      	CBI PORTB, 2
000264 982b                      	CBI PORTB, 3
000265 982c                      	CBI PORTB, 4
000266 982d                      	CBI PORTB, 5
                                 
000267 9140 015a                 	LDS R20, X_FINAL
000269 9150 0169                 	LDS R21, R0_SIGN
00026b e021                      	LDI R18, 0B00000001
                                 	
                                 	
00026c e015                      	LDI R17, FIVE
00026d 1741                      	CP R20, R17	
00026e f420                      	BRSH SIGNCHECK
                                 	;LDI R16, 0B00000100
00026f 9a2a                      	SBI PORTB, 2
                                 	;LDI R17, 0B00000001
000270 9a58                      	SBI PORTD, 0
                                 	;OUT PORTD, R17
                                 	;OUT PORTB, R16
000271 d138                      	RCALL CLEAR
000272 cd9a                      	RJMP MAIN
                                 
                                 SIGNCHECK:
000273 2352                      	AND R21, R18
000274 1725                      	CP R18, R21
000275 f009                      	BREQ MINUSSIGNAL
000276 f491                      	BRNE PLUSSIGNAL
                                 
                                 MINUSSIGNAL:
000277 e218                      	LDI R17, FOURTY
000278 1741                      	CP  R20, R17
000279 f418                      	BRSH MINUSSEVENTY
                                 	;LDI R16, 0B00000100
                                 	;OUT PORTB, R16
00027a 9a2a                      	SBI PORTB, 2
00027b d12e                      	RCALL CLEAR
00027c cd90                      	RJMP MAIN
                                 
                                 	MINUSSEVENTY:
00027d e416                      		LDI R17, SEVENTY
00027e 1741                      		CP R20, R17
00027f f420                      		BRSH MINUSNINTY
                                 		;LDI R16, 0B00001100
                                 		;OUT PORTB, R16
000280 9a2a                      		SBI PORTB, 2
000281 9a2b                      		SBI PORTB, 3
000282 d127                      		RCALL CLEAR
000283 cd89                      		RJMP MAIN
                                 
                                 		MINUSNINTY:
                                 			;LDI R16, 0B00011100
                                 			;OUT PORTB, R16
000284 9a2a                      			SBI PORTB, 2
000285 9a2b                      			SBI PORTB, 3
000286 9a2c                      			SBI PORTB, 4
000287 d122                      			RCALL CLEAR
000288 cd84                      			RJMP MAIN
                                 
                                 PLUSSIGNAL:
000289 e218                      	LDI R17, FOURTY
00028a 1741                      	CP  R20, R17
00028b f418                      	BRSH PLUSSEVENTY
                                 	;LDI R17, 0B00000001
                                 	;OUT PORTD, R17
00028c 9a58                      	SBI PORTD, 0
00028d d11c                      	RCALL CLEAR
00028e cd7e                      	RJMP MAIN
                                 
                                 	PLUSSEVENTY:
00028f e416                      		LDI R17, SEVENTY
000290 1741                      		CP R20, R17
000291 f420                      		BRSH PLUSNINTY
                                 		;LDI R17, 0B00000011
                                 		;OUT PORTD, R17
000292 9a58                      		SBI PORTD, 0
000293 9a59                      		SBI PORTD, 1
000294 d115                      		RCALL CLEAR
000295 cd77                      		RJMP MAIN
                                 
                                 		PLUSNINTY:
                                 			;LDI R17, 0B00000111
                                 			;OUT PORTD, R17
000296 9a58                      			SBI PORTD, 0
000297 9a59                      			SBI PORTD, 1
000298 9a5a                      			SBI PORTD, 2
000299 d110                      			RCALL CLEAR
00029a cd72                      			RJMP MAIN
                                 
                                 
                                 ;-----------------------------------------------------------------------------------------------
00029b cd71                      	RJMP MAIN
                                 	
                                 ;-----------------------------------------------------------------------------------------------
                                 ;LCD INITIALIZING
                                 LCD_INIT:
00029c e323                      	LDI R18,0X33
00029d d015                      	RCALL COMMAND_WRITE ;INITIALIZING THE LCD FOR 4-BIT DATA 
00029e d0fc                      	RCALL DELAY_MS
00029f e322                      	LDI R18,0X32
0002a0 d012                      	RCALL COMMAND_WRITE ;INITIALIZING THE LCD FOR 4-BIT DATA
0002a1 d0f9                      	RCALL DELAY_MS
0002a2 e228                      	LDI R18,0X28
0002a3 d00f                      	RCALL COMMAND_WRITE ;LCD 2 LINES,5X7 MATRIX
0002a4 d0f6                      	RCALL DELAY_MS
0002a5 e02c                      	LDI R18,0X0C
0002a6 d00c                      	RCALL COMMAND_WRITE ;DISPLAY ON,CURSOR OFF
0002a7 e021                      	LDI R18,0X01
0002a8 d00a                      	RCALL COMMAND_WRITE ;CLEAR LCD
0002a9 d0f1                      	RCALL DELAY_MS
0002aa e026                      	LDI R18,0X06
0002ab d007                      	RCALL COMMAND_WRITE ;SHIFT CURSOR RIGHT
0002ac d0ee                      	RCALL DELAY_MS
0002ad d028                      	RCALL WORD
0002ae d0ec                      	RCALL DELAY_MS
0002af ec20                      	LDI R18 ,0XC0
0002b0 d002                      	RCALL COMMAND_WRITE
0002b1 d0e9                      	RCALL DELAY_MS
0002b2 9508                      	RET
                                 ;-------------------------------------------------------------------------------------------------
                                 ;COMMAND WRITE
                                 COMMAND_WRITE:
0002b3 2fb2                      	MOV R27,R18
0002b4 7fb0                      	ANDI R27,0XF0 ;MASK LOW NIBBLE & KEEP HIGH NIBBLE
0002b5 b9bb                      	OUT PORTD,R27 ;O/P COMMAND HIGH NOBBLE TO PORT D
0002b6 9829                      	CBI PORTB,1   ;RS=0 FOR COMMAND
0002b7 9a28                      	SBI PORTB,0   ;EN=1
0002b8 940e 0393                 	CALL DELAY_SHORT
0002ba 9828                      	CBI PORTB,0   ;SEND A IMPLUSE TO THE EN PIN
0002bb d0da                      	RCALL DELAY_US ;DELAY IN MICRO SECOND
                                 
0002bc 2fb2                      	MOV R27,R18
0002bd 95b2                      	SWAP R27
0002be 7fb0                      	ANDI R27,0XF0
0002bf b9bb                      	OUT PORTD,R27
0002c0 9a28                      	SBI PORTB,0
0002c1 d0d1                      	RCALL DELAY_SHORT
0002c2 9828                      	CBI PORTB,0 ;SEND A IMPLUSE TO THE EN PIN
0002c3 d0d2                      	RCALL DELAY_US
0002c4 9508                      	RET
                                 ;-------------------------------------------------------------------------------------------------
                                 ;DATA WRITE FUNCTION
                                 DATA_WRITE:
0002c5 2fb2                      	MOV R27,R18
0002c6 7fb0                      	ANDI R27,0XF0
0002c7 b9bb                      	OUT PORTD,R27
0002c8 9a29                      	SBI PORTB,1
0002c9 9a28                      	SBI PORTB,0
0002ca d0c8                      	RCALL DELAY_SHORT
0002cb 9828                      	CBI PORTB,0
0002cc d0c6                      	RCALL DELAY_SHORT
                                 	
0002cd 2fb2                      	MOV R27,R18
0002ce 95b2                      	SWAP R27
0002cf 7fb0                      	ANDI R27,0XF0
0002d0 b9bb                      	OUT PORTD,R27
0002d1 9a28                      	SBI PORTB,0
0002d2 d0c0                      	RCALL DELAY_SHORT
0002d3 9828                      	CBI PORTB,0 
0002d4 d0c1                      	RCALL DELAY_US
0002d5 9508                      	RET
                                 ;-------------------------------------------------------------------------------------------------------
                                 ;PRINT THE ANGLE WORD IN THE LCD
                                 WORD:
0002d6 e421                      	LDI R18,'A'
0002d7 dfed                      	RCALL DATA_WRITE
0002d8 e42e                      	LDI R18,'N'
0002d9 dfeb                      	RCALL DATA_WRITE
0002da e427                      	LDI R18,'G'
0002db dfe9                      	RCALL DATA_WRITE
0002dc e42c                      	LDI R18,'L'
0002dd dfe7                      	RCALL DATA_WRITE
0002de e425                      	LDI R18,'E'
0002df dfe5                      	RCALL DATA_WRITE
0002e0 e220                      	LDI R18,' '
0002e1 dfe3                      	RCALL DATA_WRITE
0002e2 e32a                      	LDI R18,':'
0002e3 dfe1                      	RCALL DATA_WRITE
0002e4 e220                      	LDI R18,' '
0002e5 dfdf                      	RCALL DATA_WRITE
0002e6 9508                      	RET
                                 ;-----------------------------------------------------------------------------------------------------
                                 ASCII:
0002e7 2788                      	CLR R24 ;SET THE COUNTER2 INTIAL VALUE O
0002e8 2799                      	CLR R25 ;SET THE COUNTER3 INTIAL VALUE O
                                 	
                                 LOOP9:
0002e9 2fbe                      	MOV R27,R30
0002ea 36e4                      	CPI R30,100
                                 RUN1:
0002eb f01a                      	BRMI LOOP10 ;JUMP WHEN R30<100
                                 RUN2:
0002ec 9583                      	INC R24
0002ed 56e4                      	SUBI R30,100 ;R30=R30-100
0002ee cffa                      	RJMP LOOP9
                                 
                                 LOOP10:
0002ef 30ea                      	CPI R30,10 ;COMPARE R30 WITH 10
0002f0 f01a                      	BRMI DSP
0002f1 9593                      	INC R25
0002f2 50ea                      	SUBI R30,10
0002f3 cffb                      	RJMP LOOP10
                                 
                                 DSP:
0002f4 e330                      	LDI  R19,48
                                 CHECK_01:
0002f5 27cc                      	CLR R28
0002f6 13bc                      	CPSE R27,R28
0002f7 d045                      	RCALL SIGN
                                 
                                 
                                 BRANCH2:
0002f8 2f29                      	MOV R18,R25
0002f9 0f23                      	ADD R18,R19
0002fa dfca                      	RCALL DATA_WRITE
                                 
                                 BRANCH3:
0002fb 2f2e                      	MOV R18,R30
0002fc 0f23                      	ADD R18,R19
0002fd dfc7                      	RCALL DATA_WRITE
                                 
                                 	
0002fe d09c                      	RCALL DELAY_MS
                                  
0002ff 9508                      	RET
                                 ;--------------------------------------------------------------------------------------------------------------
                                 MAP:
                                 ;(1.48*X-493)
000300 e904                      	LDI R16,0X94;148
000301 e010                      	LDI R17,0X00
000302 d011                      	RCALL MULTI
000303 2d12                      	MOV R17,RES1  ;R2
000304 2d23                      	MOV R18,RES2  ;R3
000305 e040                      	LDI R20,0X00
000306 2700                      	CLR R16
000307 2422                      	CLR RES1
000308 2433                      	CLR RES2
000309 2444                      	CLR RES3
00030a 2455                      	CLR RES4
00030b e6a4                      	LDI R26,LOW(NUM1)
00030c e0b0                      	LDI R27,HIGH(NUM1)
00030d e0c0                      	LDI R28,0X00
00030e d01d                      	RCALL DIV
                                 
00030f 5e0d                      	SUBI R16,LOW(SUB_NUM)
000310 4071                      	SBCI R23,HIGH(SUB_NUM)
000311 2f17                      	MOV R17,R23
000312 f08a                      	BRMI COMPLEMENT
000313 9508                      	RET
                                 ;--------------------------------------------------------------------------------------------------------------
                                 MULTI:
000314 2733                      	CLR R19
000315 9ff1                      	MUL R31,R17;HIGH
000316 2c40                      	MOV RES3,R0
000317 2c51                      	MOV RES4,R1
                                 
000318 9fe0                      	MUL R30,R16;LOW
000319 2c20                      	MOV RES1,R0
00031a 2c31                      	MOV RES2,R1
                                 
00031b 9ff0                      	MUL R31,R16
00031c 0c30                      	ADD RES2,R0
00031d 1c41                      	ADC RES3,R1
00031e 1e53                      	ADC RES4,R19
                                 
00031f 9fe1                      	MUL R30,R17
000320 0c30                      	ADD RES2,R0
000321 1c41                      	ADC RES3,R1
000322 1e53                      	ADC RES4,R19
000323 9508                      	RET
                                 ;--------------------------------------------------------------------------------------------------------------
                                 COMPLEMENT:
000324 9500                      	COM R16
000325 9510                      	COM R17
000326 e021                      	LDI R18,0X01
000327 0f02                      	ADD R16,R18
000328 e020                      	LDI R18,0X00
000329 1f12                      	ADC R17,R18
00032a e061                      	LDI R22,0X01
00032b 9508                      	RET
                                 ;--------------------------------------------------------------------------------------------------------------
                                 
                                 DIV:
00032c 2700                      	CLR R16
00032d 2777                      	CLR R23
00032e 27dd                      	CLR R29
00032f 2733                      	CLR R19
000330 2766                      	CLR R22
000331 e051                      	LDI R21,0X01
000332 2788                      	CLR R24
                                 NEW_01:
000333 1b1a                      	SUB R17,R26
000334 0b2b                      	SBC R18,R27
000335 0b4c                      	SBC R20,R28
000336 0b36                      	SBC R19,R22
000337 f40a                      	BRPL LOAD
000338 9508                      	RET	
                                 
                                 LOAD:
000339 0f05                      	ADD R16,R21;
00033a 1f78                      	ADC R23,R24
00033b 1fd8                      	ADC R29,R24
00033c cff6                      	RJMP NEW_01
                                 ;----------------------------------------------------------------------------------------------------------------
                                 SIGN:
00033d 2722                      	CLR R18
00033e e060                      	LDI R22,0X00
00033f 9120 0169                 	LDS R18,R0_SIGN
000341 1326                      	CPSE R18,R22
000342 f412                      	BRPL MINS
000343 d004                      	RCALL PLUS
                                 JUMP_01:
000344 9508                      	RET
                                 
                                 MINS:
000345 e22d                      	LDI R18,'-'
000346 df7e                      	RCALL DATA_WRITE
000347 cffc                      	RJMP JUMP_01
                                 PLUS:
000348 e22b                      	LDI R18,'+'
000349 df7b                      	RCALL DATA_WRITE
00034a cff9                      	RJMP JUMP_01
                                 ;----------------------------------------------------------------------------------------------------------------
                                 POWER:
00034b 2f02                      	MOV R16,R18
00034c 2f1b                      	MOV R17,R27
00034d 2ffb                      	MOV R31,R27
00034e 2fe2                      	MOV R30,R18
00034f dfc4                      	RCALL MULTI
000350 9508                      	RET
                                 ;----------------------------------------------------------------------------------------------------------------
                                 SQURE_ROOT:
000351 2744                      	CLR R20
000352 2777                      	CLR R23
000353 e064                      	LDI R22,0x04;HIGH BYTE
000354 2f26                      	MOV R18,R22
000355 27dd                      	CLR R29	;LOW BYTE
000356 27cc                      	CLR R28	;HIGH BYTE
000357 c003                      	RJMP GONE2
                                 GONE1:
000358 2fc4                      	MOV R28,R20
000359 9566                      	LSR R22
00035a f069                      	BREQ GONE3
                                 GONE2:
00035b 2f26                      	MOV R18,R22
00035c 2bc2                      	OR R28,R18
00035d 2f2d                      	MOV R18,R29
00035e 2fbc                      	MOV R27,R28
00035f dfeb                      	RCALL POWER
000360 1582                      	CP R24,RES1
000361 0593                      	CPC R25,RES2
000362 05a4                      	CPC R26,RES3
000363 0575                      	CPC R23,RES4
000364 f39a                      	BRMI GONE1
000365 d000                      	RCALL SAVE1
                                 SAVE1:
000366 2f4c                      	MOV R20,R28
000367 cff0                      	RJMP GONE1
                                 GONE3:
000368 2f54                      	MOV R21,R20;HIGH BYTE
000369 2744                      	CLR R20
00036a e860                      	LDI R22,0X80
00036b 2f26                      	MOV R18,R22
00036c 27dd                      	CLR R29
00036d 2fc5                      	MOV R28,R21
00036e c003                      	RJMP GONE5
                                 GONE4:
00036f 2fd4                      	MOV R29,R20
000370 9566                      	LSR R22
000371 f069                      	BREQ DONE
                                 GONE5:
000372 2f26                      	MOV R18,R22
000373 2bd2                      	OR R29,R18
000374 2f2d                      	MOV R18,R29
000375 2fbc                      	MOV R27,R28
000376 dfd4                      	RCALL POWER
000377 1582                      	CP R24,RES1
000378 0593                      	CPC R25,RES2
000379 05a4                      	CPC R26,RES3
00037a 0575                      	CPC R23,RES4
00037b f39a                      	BRMI GONE4
00037c d000                      	RCALL SAVE2
                                 SAVE2:
00037d 2f4d                      	MOV R20,R29
00037e cff0                      	RJMP GONE4
                                 DONE:
00037f 9508                      	RET
                                 ;----------------------------------------------------------------------------------------------------------------
                                 ADD_VALUE:
000380 9100 0154                 	LDS R16,SQURE_LOW
000382 9130 0155                 	LDS R19,SQURE_MID
000384 e050                      	LDI R21,0X00
000385 0f01                      	ADD R16,R17
000386 1f32                      	ADC R19,R18
000387 1f54                      	ADC R21,R20
000388 9508                      	RET
                                 ;----------------------------------------------------------------------------------------------------------------
                                 SUB_VALUE:
000389 9100 0154                 	LDS R16,SQURE_LOW
00038b 9130 0155                 	LDS R19,SQURE_MID
00038d e050                      	LDI R21,0X00
00038e 1b01                      	SUB R16,R17
00038f 0b32                      	SBC R19,R18
000390 0b54                      	SBC R21,R20
000391 940c 016d                 	JMP ROOT2
                                 ;----------------------------------------------------------------------------------------------------------------
                                 
                                 ;-----------------------------------------------------------------------------------------------------
                                 ;DELAY SHORT
                                 DELAY_SHORT:
000393 0000                      	NOP
000394 0000                      	NOP
000395 9508                      	RET
                                 ;------------------------------------------------------------------------------------------------------
                                 ;DELAY MICRO SECONDS
                                 DELAY_US:
000396 e54a                      	LDI R20,90
                                 LOOP2:
000397 dffb                      	RCALL DELAY_SHORT
000398 954a                      	DEC R20
000399 f7e9                      	BRNE LOOP2
00039a 9508                      	RET
                                 ;------------------------------------------------------------------------------------------------------
                                 ;DELAY MILISECONDS
                                 DELAY_MS:
00039b e258                      	LDI R21,40
                                 LOOP3:
00039c dff9                      	RCALL DELAY_US
00039d 955a                      	DEC R21
00039e f7e9                      	BRNE LOOP3
00039f 9508                      	RET
                                 ;------------------------------------------------------------------------------------------------------
                                 ;DELAY_SECONDS
                                 DELAY_SECONDS:
0003a0 ef4f                      	LDI R20,255
                                 LOOP4:
0003a1 ef5f                      	LDI R21,255
                                 LOOP5:
0003a2 e560                      	LDI R22,80
                                 LOOP6:
0003a3 956a                      	DEC R22
0003a4 f7f1                      	BRNE LOOP6
0003a5 955a                      	DEC R21
0003a6 f7d9                      	BRNE LOOP5
0003a7 954a                      	DEC R20
0003a8 f7c1                      	BRNE LOOP4
0003a9 9508                      	RET
                                 ;------------------------------------------------------------------------------------------------------
                                 CLEAR:
0003aa 2700                      	CLR R16
0003ab 2711                      	CLR R17
0003ac 2722                      	CLR R18
0003ad 2733                      	CLR R19
0003ae 2744                      	CLR R20
0003af 2755                      	CLR R21
0003b0 2766                      	CLR R22
0003b1 2777                      	CLR R23
0003b2 2788                      	CLR R24
0003b3 2799                      	CLR R25
0003b4 27aa                      	CLR R26
0003b5 27bb                      	CLR R27
0003b6 27cc                      	CLR R28
0003b7 27dd                      	CLR R29
0003b8 27ee                      	CLR R30
0003b9 27ff                      	CLR R31
0003ba 9508                      	RET
                                 ;------------------------------------------------------------------------------------------------------


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   0 r0 :   4 r1 :   4 r2 :  29 r3 :  31 r4 :  28 
r5 :  15 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  80 r17:  78 r18:  88 r19:  31 r20:  47 
r21:  35 r22:  23 r23:  16 r24:  15 r25:  11 r26:  14 r27:  36 r28:  16 
r29:  14 r30:  35 r31:  27 
Registers used: 22 out of 35 (62.9%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  22 add   :   9 adiw  :   0 and   :   1 
andi  :   4 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   3 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   5 
brne  :   6 brpl  :   2 brsh  :   5 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   1 cbi   :  14 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  76 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :   8 cpc   :   6 
cpi   :   2 cpse  :   2 dec   :   5 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   2 jmp   :   3 
ld    :   0 ldd   :   0 ldi   : 110 lds   :  99 lpm   :   0 lsl   :   0 
lsr   :   2 mov   :  67 movw  :   0 mul   :   4 muls  :   0 mulsu :   0 
neg   :   0 nop   :   2 or    :   2 ori   :   0 out   :   6 pop   :   0 
push  :   0 rcall : 119 ret   :  18 reti  :   0 rjmp  :  22 rol   :   0 
ror   :   0 sbc   :   9 sbci  :   1 sbi   :  19 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   5 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  90 
sub   :   4 subi  :   3 swap  :   2 tst   :   0 wdr   :   0 
Instructions used: 39 out of 113 (34.5%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000776   1910      0   1910   32768   5.8%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
